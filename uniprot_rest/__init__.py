from typing import Literal, overload, Iterable

import requests

# Generated by running the below command in the JS console at
# https://www.uniprot.org/help/return_fields
# Array.from($$("table tr")).map(el => el.children[2]).filter(el => el.nodeName == "TD")
NameTaxonomyField = Literal[
    "accession",
    "id",
    "gene_names",
    "gene_primary",
    "gene_synonym",
    "gene_oln",
    "gene_orf",
    "organism_name",
    "organism_id",
    "protein_name",
    "xref_proteomes",
    "lineage",
    "virus_hosts",
]
SequenceField = Literal[
    "cc_alternative_products",
    "ft_var_seq",
    "error_gmodel_pred",
    "fragment",
    "organelle",
    "length",
    "mass",
    "cc_mass_spectrometry",
    "ft_variant",
    "ft_non_cons",
    "ft_non_std",
    "ft_non_ter",
    "cc_polymorphism",
    "cc_rna_editing",
    "sequence",
    "cc_sequence_caution",
    "ft_conflict",
    "ft_unsure",
    "sequence_version"
]

FunctionField = Literal[
    "absorption",
    "ft_act_site",
    "cc_activity_regulation",
    "ft_binding",
    "ft_ca_bind",
    "cc_catalytic_activity",
    "cc_cofactor",
    "ft_dna_bind",
    "ec",
    "cc_function",
    "kinetics",
    "ft_metal",
    "ft_np_bind",
    "cc_pathway",
    "ph_dependence",
    "redox_potential",
    "rhea",
    "ft_site",
    "temp_dependence",
]
MiscellaneousField = Literal[
    "annotation_score",
    "cc_caution",
    "comment_count",
    "feature_count",
    "keywordid",
    "keyword",
    "cc_miscellaneous",
    "protein_existence",
    "reviewed",
    "tools",
    "uniparc_id"
]
InteractionField = Literal[
    "cc_interaction",
    "cc_subunit",
]
ExpressionField = Literal[
    "cc_developmental_stage",
    "cc_induction",
    "cc_tissue_specificity",
    ]
OntologyField = Literal[
    "go_p",
    "go_c",
    "go",
    "go_f",
    "go_id",
]
PathologyBiotechField = Literal[
    "cc_allergen",
    "cc_biotechnology",
    "cc_disruption_phenotype",
    "cc_disease",
    "ft_mutagen",
    "cc_pharmaceutical",
    "cc_toxic_dose",
]
SubcellularField = Literal[
    "ft_intramem",
    "cc_subcellular_location",
    "ft_topo_dom",
    "ft_transmem",
    "ft_chain",
]
ProcessingField = Literal[
    "ft_crosslnk",
    "ft_disulfid",
    "ft_carbohyd",
    "ft_init_met",
    "ft_lipid",
    "ft_mod_res",
    "ft_peptide",
    "cc_ptm",
    "ft_propep",
    "ft_signal",
    "ft_transit",
]
StructureField = Literal[
    "structure_3d",
    "ft_strand",
    "ft_helix",
    "ft_turn",
]
PublicationField = Literal[
    "lit_pubmed_id",
]
DateField = Literal[
    "date_created",
    "date_modified",
    "date_sequence_modified",
    "version",
]
FamilyField = Literal[
    "ft_coiled",
    "ft_compbias",
    "cc_domain",
    "ft_domain",
    "ft_motif",
    "protein_families",
    "ft_region",
    "ft_repeat",
    "ft_zn_fing",
]
SequenceXrefField = Literal[
    "xref_ccds",
    "xref_embl",
    "xref_pir",
    "xref_refseq",
]
StructureXrefField = Literal[
    "xref_alphafolddb",
    "xref_bmrb",
    "xref_pcddb",
    "xref_pdb",
    "xref_pdbsum",
    "xref_sasbdb",
    "xref_smr",
    "xref_biogrid",
    "xref_corum",
    "xref_complexportal",
    "xref_dip",
    "xref_elm",
    "xref_intact",
    "xref_mint",
    "xref_string",
    "xref_bindingdb",
    "xref_chembl",
    "xref_drugbank",
    "xref_drugcentral",
    "xref_guidetopharmacology",
    "xref_swisslipids",
    "xref_allergome",
    "xref_cazy",
    "xref_clae",
    "xref_esther",
    "xref_imgt_gene-db",
    "xref_merops",
    "xref_moondb",
    "xref_moonprot",
    "xref_peroxibase",
    "xref_rebase",
    "xref_tcdb",
    "xref_unilectin",
    "xref_carbonyldb",
    "xref_depod",
    "xref_glyconnect",
    "xref_glygen",
    "xref_metosite",
    "xref_phosphositeplus",
    "xref_swisspalm",
    "xref_unicarbkb",
    "xref_iptmnet",
    "xref_biomuta",
    "xref_dmdm",
    "xref_dbsnp",
    "xref_compluyeast-2dpage",
    "xref_dosac-cobs-2dpage",
    "xref_ogp",
    "xref_reproduction-2dpage",
    "xref_swiss-2dpage",
    "xref_ucd-2dpage",
    "xref_world-2dpage",
    "xref_cptac",
    "xref_epd",
    "xref_massive",
    "xref_maxqb",
    "xref_pride",
    "xref_paxdb",
    "xref_peptideatlas",
    "xref_promex",
    "xref_proteomicsdb",
    "xref_topdownproteomics",
    "xref_jpost",
    "xref_abcd",
    "xref_antibodypedia",
    "xref_cptc",
    "xref_dnasu",
    "xref_ensembl",
    "xref_ensemblbacteria",
    "xref_ensemblfungi",
    "xref_ensemblmetazoa",
    "xref_ensemblplants",
    "xref_ensemblprotists",
    "xref_geneid",
    "xref_gramene",
    "xref_kegg",
    "xref_mane-select",
    "xref_patric",
    "xref_ucsc",
    "xref_vectorbase",
    "xref_wbparasite",
    "xref_wbparasitetranscriptprotein",
    "xref_arachnoserver",
    "xref_araport",
    "xref_cgd",
    "xref_ctd",
    "xref_conoserver",
    "xref_disgenet",
    "xref_echobase",
    "xref_flybase",
    "xref_genecards",
    "xref_genereviews",
    "xref_hgnc",
    "xref_hpa",
    "xref_legiolist",
    "xref_leproma",
    "xref_mgi",
    "xref_mim",
    "xref_maizegdb",
    "xref_malacards",
    "xref_niagads",
    "xref_opentargets",
    "xref_orphanet",
    "xref_pharmgkb",
    "xref_pombase",
    "xref_pseudocap",
    "xref_rgd",
    "xref_sgd",
    "xref_tair",
    "xref_tuberculist",
    "xref_veupathdb",
    "xref_vgnc",
    "xref_wormbase",
    "xref_xenbase",
    "xref_zfin",
    "xref_dictybase",
    "xref_euhcvdb",
    "xref_nextprot",
    "xref_genetree",
    "xref_hogenom",
    "xref_inparanoid",
    "xref_ko",
    "xref_oma",
    "xref_orthodb",
    "xref_phylomedb",
    "xref_treefam",
    "xref_eggnog",
    "xref_brenda",
    "xref_biocyc",
    "xref_pathwaycommons",
    "xref_plantreactome",
    "xref_reactome",
    "xref_sabio-rk",
    "xref_signor",
    "xref_signalink",
    "xref_unipathway",
    "xref_biogrid-orcs",
    "xref_chitars",
    "xref_evolutionarytrace",
    "xref_genewiki",
    "xref_genomernai",
    "xref_phi-base",
    "xref_pro",
    "xref_pharos",
    "xref_rnact",
    "xref_bgee",
    "xref_cleanex",
    "xref_collectf",
    "xref_expressionatlas",
    "xref_genevisible",
    "xref_cdd",
    "xref_disprot",
    "xref_gene3d",
    "xref_hamap",
    "xref_ideal",
    "xref_interpro",
    "xref_panther",
    "xref_pirsf",
    "xref_prints",
    "xref_prosite",
    "xref_pfam",
    "xref_prodom",
    "xref_sfld",
    "xref_smart",
    "xref_supfam",
    "xref_tigrfams"
]
Format = Literal["html", "txt", "xml", "rdf", "fasta", "gff", "json", "list", "tsv", "obo", "xlsx"]
Dataset = Literal["uniprot", "uniref", "uniparc", "taxonomy", "uniprotkb", "proteomes", "locations", "unirule", "diseases", "keywords", "citations", "database", "arba"]


def lookup(id: str, dataset: Dataset, format: Format) -> requests.Response:
    return requests.get(f"https://www.uniprot.org/{dataset}/{id}.{format}")

class KbQuery:
    pass

@overload
def search(query: str, dataset: Dataset, format: Literal["tsv", "json", "xlsx"] = "txt", fields: Iterable[str] = (), compressed= False, size = 500, cursor = None, **kwargs) -> requests.Response:
    ...
@overload
def search(query: str, dataset: Dataset, format: Literal["html", "txt", "xml", "rdf", "fasta", "gff", "list", "obo"] = "txt", compressed= False, size = 500, cursor = None, **kwargs) -> requests.Response:
    ...
def search(query, dataset, format, fields = (), compressed= False, size = 500, cursor = None, **kwargs) -> requests.Response:
    url = f"https://www.uniprot.org/{dataset}/search"

@overload
def search_kb(query: str | KbQuery, dataset: Dataset, format: Literal["tsv", "json", "xlsx"] = "txt", fields: Iterable[str] = (), compressed= False, size = 500, cursor = None, **kwargs) -> requests.Response:
    ...
@overload
def search_kb(query: str | KbQuery, dataset: Dataset, format: Literal["html", "txt", "xml", "rdf", "fasta", "gff", "list", "obo"] = "txt", compressed= False, size = 500, cursor = None, **kwargs) -> requests.Response:
    ...
def search_kb(query):
    pass